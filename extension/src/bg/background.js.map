{"version":3,"file":"src/bg/background.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAaA;;AACA;;AAGA;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AADA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AANA;AASA;;AAIA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAGA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAFA;AAKA;;AAEA;AACA;AACA;;;AAGA;AAEA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;AACA;AAjCA;AAmCA","sources":["webpack://canvas-plus/./src/bg/background.js"],"sourcesContent":["let DEFAULT_INSTANCE = {\r\n    courses: {},\r\n    courseIds: [],\r\n    hiddenCourseIds: [],\r\n    settings: {\r\n        tabsEnabled: true,\r\n        gradesEnabled: true,\r\n        upcomingAssignmentsEnabled: true,\r\n        gradeTagsEnabled: true\r\n    }\r\n}\r\n\r\n// we maintain local state here\r\n// also default settings\r\nlet state = {};\r\n\r\n// resetting legacy settings goes here in case of version differences\r\nfunction resetLegacy() {\r\n\r\n}\r\n\r\n// resetting legacy settings for each instance goes here\r\nfunction resetLegacyInstance(instance) {\r\n    if (Array.isArray(state[instance].courses)) {\r\n        state[instance].courses = {};\r\n    }\r\n}\r\n\r\nchrome.storage.sync.get({\r\n    instances: [],\r\n}, items => {\r\n    state.instances = items.instances;\r\n    for (let instance of items.instances) {\r\n        let request = {};\r\n        request[instance] = DEFAULT_INSTANCE;\r\n        chrome.storage.sync.get(request, items => {\r\n            if (items[instance]) {\r\n                state[instance] = {...DEFAULT_INSTANCE, ...items[instance]};\r\n            }\r\n            resetLegacyInstance(instance)\r\n        });\r\n    }\r\n\r\n    console.log(state);\r\n    resetLegacy();\r\n});\r\n\r\n\r\nfunction sync(instance) {\r\n    let request = {};\r\n    request[instance] = state[instance];\r\n    chrome.storage.sync.set(request, () => console.log('Updated sync', instance, state[instance]))\r\n}\r\n\r\n// get everything\r\nfunction get(request, sender, sendResponse) {\r\n    sendResponse(state);\r\n}\r\n\r\n// set everything\r\nfunction set(request, sender, sendResponse) {\r\n    state = request.state;\r\n    console.log('Updated with state', request.state);\r\n    chrome.storage.sync.set(state, () => console.log('Updated entire state'));\r\n    sendResponse(true);\r\n}\r\n\r\n// register an instance\r\nfunction registerInstance(request, sender, sendResponse) {\r\n    if (!Object.keys(state).includes(request.instance)) {\r\n        state[request.instance] = DEFAULT_INSTANCE;\r\n\r\n        state.instances.push(request.instance);\r\n    }\r\n    sendResponse(state[request.instance])\r\n\r\n    sync(request.instance);\r\n}\r\n\r\n// update courses\r\nfunction setCourses(request, sender, sendResponse) {\r\n    let instance = state[request.instance];\r\n    // sort raw courses into only data we care about to avoid bloat\r\n    for (let course of request.courses) {\r\n        // manage course info\r\n        instance.courses[course.id] = {\r\n            ...(instance.courses[course.id] || {\r\n                customLinks: {},\r\n                displayName: course.name,\r\n            }),\r\n            id: course.id,\r\n            name: course.name\r\n        }\r\n\r\n        if (instance.courses[course.id].displayName === undefined)\r\n            instance.courses[course.id].displayName = course.name;\r\n\r\n        // manage ids\r\n        if (!instance.courseIds.includes(course.id) && !instance.hiddenCourseIds.includes(course.id))\r\n            instance.courseIds.push(course.id);\r\n    }\r\n\r\n    sync(request.instance);\r\n    sendResponse(instance);\r\n\r\n    // let instance = state[request.instance];\r\n    // let newCourses = request.courses;\r\n    //\r\n    // for (let course of newCourses) {\r\n    //   instance.courses[course.id] = {\r\n    //     name: course.name,\r\n    //     custom: \"\",\r\n    //     id: course.id,\r\n    //     ...(instance.courses[course.id] || {}) // if it doesn't exist, just use an empty object\r\n    //   };\r\n    //\r\n    //   if (!instance.courseIds.includes(course.id) && !instance.hiddenCourseIds.includes(course.id)) {\r\n    //     instance.courseIds.push(course.id);\r\n    //   }\r\n    // }\r\n    // sendResponse(instance);\r\n}\r\n\r\n// get courses\r\nfunction getCourses({instance}, sender, sendResponse) {\r\n    sendResponse({\r\n        courseIds: state[instance].courseIds,\r\n        courses: state[instance].courses,\r\n    });\r\n    // let returnObj = {};\r\n    // for (let course of state[instance].courses) {\r\n    //   returnObj[course] = state[instance][course]\r\n    // }\r\n    // sendResponse(returnObj);\r\n}\r\n\r\n// set settings\r\nfunction setSetting({instance, key, value}, sender, sendResponse) {\r\n    state[instance].settings[key] = value;\r\n    sync(instance);\r\n}\r\n\r\n// get settings\r\nfunction getSetting({instance, key}, sender, sendResponse) {\r\n    sendResponse(state[instance].settings[key]);\r\n}\r\n\r\n// set settings\r\nfunction getTabs({instance}, sender, sendResponse) {\r\n    // let courses = [];\r\n    // state[instance].courses.forEach(courseId =>\r\n    //     courses.push({\r\n    //       ...state[instance][courseId],\r\n    //       id: courseId\r\n    //     }));\r\n    sendResponse({\r\n        courseIds: state[instance].courseIds,\r\n        courses: state[instance].courses,\r\n        // enabled: state[instance].settings.tabsEnabled\r\n    })\r\n}\r\n\r\nfunction reset() {\r\n    state = {}\r\n}\r\n\r\n//example of using a message handler from the inject scripts\r\nchrome.extension.onMessage.addListener(\r\n    function (request, sender, sendResponse) {\r\n        console.log('got action', request.action);\r\n        switch (request.action) {\r\n            case \"GET\":\r\n                get(request, sender, sendResponse);\r\n                break;\r\n            case \"SET\":\r\n                set(request, sender, sendResponse);\r\n                break;\r\n            case \"REGISTER_INSTANCE\":\r\n                registerInstance(request, sender, sendResponse);\r\n                break;\r\n            case \"SET_COURSES\":\r\n                setCourses(request, sender, sendResponse);\r\n                break;\r\n            case \"GET_COURSES\":\r\n                getCourses(request, sender, sendResponse);\r\n                break;\r\n            case \"SET_SETTING\":\r\n                setSetting(request, sender, sendResponse);\r\n                break;\r\n            case \"GET_SETTING\":\r\n                getSetting(request, sender, sendResponse);\r\n                break;\r\n            case \"GET_TABS\":\r\n                getTabs(request, sender, sendResponse);\r\n                break;\r\n            case \"OPTIONS\":\r\n                if (chrome.runtime.openOptionsPage) {\r\n                    chrome.runtime.openOptionsPage();\r\n                } else {\r\n                    chrome.tabs.create({\r\n                        url: chrome.runtime.getURL('src/options/options.html')\r\n                    })\r\n                }\r\n                break;\r\n        }\r\n    });"],"names":[],"sourceRoot":""}